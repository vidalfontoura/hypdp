
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;

import travelingSalesmanProblem.TSP;
import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import BinPacking.BinPacking;
import Examples.ExampleHyperHeuristic1;
import FlowShop.FlowShop;
//import PersonnelScheduling.PersonnelScheduling;
import SAT.SAT;
import VRP.VRP;

/**
 * This class replicates the experimental setup for the CHeSC competition 2011.
 * Please refer to the comments in the code to find the parameters which are modifiable.
 * 
 * Your hyper-heuristic should be added into the loadHyperHeuristic class, replacing the example hyper-heuristic.
 * 
 * To allow the program to print the output files, please create the following file structure, with 6 subdirectories:
 * 
 * results/
 *    |- SAT/
 *    |- BinPacking/
 *    |- PersonnelScheduling/
 *    |- FlowShop/
 *    |- TSP/
 *    |- VRP/
 *    
 * Please report any bugs or issues to Dr. Matthew Hyde at mvh@cs.nott.ac.uk.
 * 
 * @author Dr. Matthew Hyde (mvh@cs.nott.ac.uk), School of Computer Science. University of Nottingham, U.K.
 *
 */ 

public class CompetitionRunner extends Thread {
	
	/* These are parameters which can be changed.
	 * time - set to ten minutes, but this may need to change depending on your machine spec. Refer to http://www.asap.cs.nott.ac.uk/chesc2011/benchmarking.html
	 * numberofhyperheuristics - the number you wish to test in the same run
	 * problem - the selected domain
	 * instance - the selected instance of the problem domain. This should be between 0-4 inclusive
	 * rng - select a random seed
	 */
	private static final long time = 600000;
	private static final int numberofhyperheuristics = 1;
	private static int problem = 0;
	private static int instance = 0;//This should be between 0-4 inclusive.
	private static Random rng = new Random(123456789);
	
	/* These are parameters were used for the competition, so if they are changed then the results may not be comparable to those of the competition
	 */
	private static int numberofruns = 31;
	private static final int domains = 6;
	private static final int instances = 5;
	
	private static long instanceseed;
	private static String resultsfolder;
	private static long[][][] instanceseeds;

	public static HyperHeuristic loadHyperHeuristic(int number, long timeLimit, Random rng) {
		HyperHeuristic h;
		switch (number) {
		case 0: h = new ExampleHyperHeuristic1(rng.nextLong()); 
		h.setTimeLimit(timeLimit); break;
		default: System.err.println("there is no hyper heuristic with this index");
		h = null;
		System.exit(0);
		}
		return h;
	}

	public static ProblemDomain loadProblemDomain(int number) {
		ProblemDomain p;
		switch (number) {
		case 0: p = new SAT(instanceseed); break;
		case 1: p = new BinPacking(instanceseed); break;
		//case 2: p = new PersonnelScheduling(instanceseed); break;
		case 3: p = new FlowShop(instanceseed); break;
		case 4: p = new TSP(instanceseed); break;
		case 5: p = new VRP(instanceseed); break;
		default: System.err.println("there is no problem domain with this index");
		p = new BinPacking(rng.nextLong());
		System.exit(0);
		}
		return p;
	}

	public synchronized void run() {
		int[][] instances_to_use = new int[domains][];
		/*
		 * These instances are generated by CompetitionInstanceSelector.java
		 * Ten instances are included for each problem domain, but these are the instances selected for use in the competition.
		 * The last two instances of the first four domains were hidden instances.
		 */
		int[] sat = {3,5,4,10,11};
		int[] bp = {7,1,9,10,11};
		int[] ps = {5,9,8,10,11};
		int[] fs = {1,8,3,10,11};
		int[] tsp = {0,8,2,7,6};
		int[] vrp = {6,2,5,1,9};

		instances_to_use[0] = sat;
		instances_to_use[1] = bp;
		instances_to_use[2] = ps;
		instances_to_use[3] = fs;
		instances_to_use[4] = tsp;
		instances_to_use[5] = vrp;
		try {
			FileWriter fwriter = new FileWriter("results/"+problem+"-"+instance+".txt");
			PrintWriter printer = new PrintWriter(fwriter);

			System.out.println("PROBLEM DOMAIN " + resultsfolder);
			printer.println("PROBLEM DOMAIN " + resultsfolder);
			int instancetouse = instances_to_use[problem][instance];
			System.out.println("  instance " + instancetouse+" ");
			printer.println("  instance " + instancetouse+" ");

			FileWriter f = new FileWriter("results/" + resultsfolder + "/instance" + instance + ".txt");
			PrintWriter buffprint = new PrintWriter(f);
			for (int run = 0; run < numberofruns; run++) {
				instanceseed = instanceseeds[problem][instance][run];
				System.out.println("    RUN " + run + " " + instanceseed);
				printer.println("    RUN " + run);
				for (int hyperheuristic = 0; hyperheuristic < numberofhyperheuristics; hyperheuristic++) {

					ProblemDomain p = loadProblemDomain(problem);
					HyperHeuristic h = loadHyperHeuristic(hyperheuristic, time, rng);
					System.out.print("      HYPER HEURISTIC " + h.toString());
					p.loadInstance(instancetouse);
					h.loadProblemDomain(p);

					long initialTime2 = System.currentTimeMillis();
					h.run();

					int[] i = p.getHeuristicCallRecord();
					int counter = 0;
					for (int y : i) {
						counter += y;
					}
					System.out.println("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime()/1000.0) + "\t" + (System.currentTimeMillis()-initialTime2)/1000.0 + "\t" + counter);
					printer.println("\t" + h.getBestSolutionValue() + "\t" + (h.getElapsedTime()/1000.0) + "\t" + (System.currentTimeMillis()-initialTime2)/1000.0 + "\t" + counter);
					buffprint.print(h.getBestSolutionValue() + " ");

					FileWriter f1 = new FileWriter("results/" + resultsfolder + "/time" + instance + ".txt", true);
					PrintWriter buffprint1 = new PrintWriter(f1);
					double[] u = h.getFitnessTrace();
					for (double y : u) {
						buffprint1.print(y + " ");
					}buffprint1.println();
					buffprint1.close();
					f1.close();
				}
				buffprint.println();
			}
			printer.close();
			fwriter.close();
			buffprint.close();
			f.close();

		} catch (IOException a1) {
			System.err.println(a1.getMessage());
			System.exit(0);
		}
	}

	public static void main(String[] args) {
		instanceseeds = new long[domains][instances][numberofruns];

		for (int x = 0; x < domains; x++) {
			for (int y = 0; y < instances; y++) {
				for (int r = 0; r < numberofruns; r++) {
					instanceseeds[x][y][r] = rng.nextLong();
				}
			}
		}

		resultsfolder = "not worked";
		switch (problem) {
		case 0: resultsfolder = "SAT"; break;
		case 1: resultsfolder = "BinPacking"; break;
		case 2: resultsfolder = "PersonnelScheduling"; break;
		case 3: resultsfolder = "FlowShop"; break;
		case 4: resultsfolder = "TSP"; break;
		case 5: resultsfolder = "VRP"; break;
		default: System.err.println("wrong input for the problem domain");
		System.exit(-1);
		}

		CompetitionRunner r = new CompetitionRunner();
		r.start();
		try {
			r.join();
		} catch(InterruptedException e) {
			System.out.println();System.out.println();
			System.exit(0);
		}
	}
}
